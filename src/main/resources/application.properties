# 開発環境用
spring.datasource.url=jdbc:mysql://localhost:3306/delivery_db
spring.datasource.username=root
spring.datasource.password=${DB_PASSWORD}

# Docker環境用
# spring.datasource.url=jdbc:mysql://db:3306/delivery_db
# spring.datasource.username=root
# spring.datasource.password=yourpassword

# AWS RDS環境用
# spring.datasource.url=jdbc:mysql://${RDS_ENDPOINT}:3306/delivery_db
# spring.datasource.username=${RDS_USERNAME}
# spring.datasource.password=${RDS_PASSWORD}

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update

# Hibernate設定の更新
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# コネクションプール設定
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.connection-timeout=20000

spring.http.encoding.enabled=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.force=true

# Open-in-viewを無効化
spring.jpa.open-in-view=false

# トランザクション分離レベルの設定
spring.datasource.hikari.transaction-isolation=TRANSACTION_READ_COMMITTED

# 自動コミットの設定
spring.datasource.hikari.auto-commit=true

# ロギング設定
logging.level.org.springframework.web=DEBUG
logging.level.com.example.delivery_management=DEBUG

server.servlet.encoding.charset=UTF-8
server.servlet.encoding.force=true

# CORS設定
spring.web.cors.allowed-origins=*
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true
spring.web.cors.max-age=3600

# HTTPS設定
server.ssl.enabled=true
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=${SSL_PASSWORD}
server.ssl.key-store-type=PKCS12
server.ssl.key-alias=tomcat

# HTTPSポート設定
server.port=8443

# HTTPをHTTPSにリダイレクト
security.require-ssl=true

management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always
